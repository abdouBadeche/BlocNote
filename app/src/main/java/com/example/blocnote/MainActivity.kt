package com.example.blocnote

import android.app.Activity
import android.content.Context
import android.content.Intent
import android.content.res.Configuration
import android.graphics.ImageDecoder
import android.net.Uri
import android.os.Build
import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.util.Log
import com.example.blocnote.Calsses.Note
import com.example.blocnote.fragments.NotesFragment
import java.util.*
import kotlinx.android.synthetic.main.activity_main.*

import android.view.Menu
import android.view.MenuItem
import android.view.View
import android.widget.ImageView
import android.widget.PopupMenu
import android.widget.Toast
import androidx.core.app.ActivityCompat
import androidx.recyclerview.widget.GridLayoutManager
import androidx.recyclerview.widget.LinearLayoutManager
import com.example.blocnote.Adapter.NoteAdapter
import com.example.blocnote.Calsses.Comunication
import kotlinx.android.synthetic.main.activity_ajouter_note.*
var tachestest : List<String> = listOf("Pain","Lait","Riz")
var notes : List<Note> =  listOf(
    Note("TDM [Projet]" , Date(2022 , 4 , 7 ) , "prolongation de délais \n Nouvelle date : 14 Mai" , "" , 1 ) ,
    Note("ALOG [TP]" , Date(2022 , 4 , 7 ) , "Le TP EJB : 14 Mai" , "" , 1 ) ,
    Note("" , Date(2022 , 4 , 8 ) , "Kotlin \n technologie pour la réalisation du projet TDM" ,
        "" ,
        3 ) ,
    Note("" , Date(2022 , 4 , 8 ) , "Android Studio \n la réalisation du projet TDM" ,
        "" ,
        3 ) ,
    Note("" , Date(2022 , 4 , 8 ) , "Conception Projet TDM \n le : 10 Mai" ,
        "" ,
        3 ) ,
    Note("" , Date(2022 , 4 , 8 ) , "" ,
        "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" ,
        2 ) ,
    Note("Liste des taches" , Date(2022 , 4 , 7 ) ,"   - Tache1\n   - Tache2\n   - Tache3","" ,4   )
) ;


class MainActivity : AppCompatActivity() , Comunication {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)





        val button = findViewById<ImageView>(R.id.imageAdd)
        button.setOnClickListener {
            val popupMenu: PopupMenu = PopupMenu(this,button)
            popupMenu.menuInflater.inflate(R.menu.add_options,popupMenu.menu)
            popupMenu.setOnMenuItemClickListener(PopupMenu.OnMenuItemClickListener { item ->
                when(item.itemId) {
                    R.id.note -> {
                        Toast.makeText(this@MainActivity, "You Clicked : " + item.title, Toast.LENGTH_SHORT).show()
                        val intent : Intent = Intent(
                            applicationContext,
                            AjouterNote::class.java
                        ) ;
                        intent.putExtra("type" , 1) ;
                        startActivityForResult(intent , 1) ;
                    }
                    R.id.image ->{
                        Toast.makeText(this@MainActivity, "You Clicked : " + item.title, Toast.LENGTH_SHORT).show()
                        val intent : Intent = Intent(
                            applicationContext,
                            AjouterNote::class.java
                        ) ;
                        intent.putExtra("type" , 2) ;
                        startActivityForResult(intent , 1) ;
                    }

                    R.id.carte -> {
                        Toast.makeText(this@MainActivity, "You Clicked : " + item.title, Toast.LENGTH_SHORT).show()
                        val intent : Intent = Intent(
                            applicationContext,
                            AjouterNote::class.java
                        ) ;
                        intent.putExtra("type" , 3) ;
                        startActivityForResult(intent , 1) ;
                    }
                    R.id.taches ->{
                        Toast.makeText(this@MainActivity, "You Clicked : " + item.title, Toast.LENGTH_SHORT).show()
                        val intent : Intent = Intent(
                            applicationContext,
                            AjouterNote::class.java
                        ) ;
                        intent.putExtra("type" , 4) ;
                        startActivityForResult(intent , 1) ;
                    }
                }
                true
            })
            popupMenu.show()
        }



        val button2 = findViewById<ImageView>(R.id.imageFilter)
        button2.setOnClickListener {
            val popupMenu: PopupMenu = PopupMenu(this,button)
            popupMenu.menuInflater.inflate(R.menu.filter_options,popupMenu.menu)
            popupMenu.setOnMenuItemClickListener(PopupMenu.OnMenuItemClickListener { item ->
                when(item.itemId) {
                    R.id.note_filtrage -> {
                        filtrage_space_l1.text = "Filtrer par" ;
                        filtrage_space_l2.text = "Note" ;
                        filtrage_space.visibility = View.VISIBLE ;
                        val new_notes = notes.filter {
                            it.type== 1
                        }
                        val listFragment = NotesFragment(new_notes!!)

                        supportFragmentManager.beginTransaction().apply {
                            replace(R.id.flFragment,  listFragment)
                            commit()
                        }
                    }
                    R.id.image_filtrage ->{
                        filtrage_space_l1.text = "Filtrer par" ;
                        filtrage_space_l2.text = "Image" ;
                        filtrage_space.visibility = View.VISIBLE ;
                        val new_notes = notes.filter {
                            it.type== 2
                        }
                        val listFragment = NotesFragment(new_notes!!)

                        supportFragmentManager.beginTransaction().apply {
                            replace(R.id.flFragment,  listFragment)
                            commit()
                        }

                    }

                    R.id.carte_filtrage -> {
                        filtrage_space_l1.text = "Filtrer par" ;
                        filtrage_space_l2.text = "Carte" ;
                        filtrage_space.visibility = View.VISIBLE ;
                        val new_notes = notes.filter {
                            it.type== 3
                        }
                        val listFragment = NotesFragment(new_notes!!)

                        supportFragmentManager.beginTransaction().apply {
                            replace(R.id.flFragment,  listFragment)
                            commit()
                        }

                    }
                    R.id.taches_filtrage ->{
                        filtrage_space_l1.text = "Filtrer par" ;
                        filtrage_space_l2.text = "Taches" ;
                        filtrage_space.visibility = View.VISIBLE ;
                        val new_notes = notes.filter {
                            it.type== 4
                        }
                        val listFragment = NotesFragment(new_notes!!)

                        supportFragmentManager.beginTransaction().apply {
                            replace(R.id.flFragment,  listFragment)
                            commit()
                        }

                    }
                    R.id.alpha_sort ->{
                        filtrage_space_l1.text = "Trier par" ;
                        filtrage_space_l2.text = "Alpha" ;
                        filtrage_space.visibility = View.VISIBLE ;
                        val new_notes = notes.sortedBy { it.titre+it.description }
                        val listFragment = NotesFragment(new_notes!!)

                        supportFragmentManager.beginTransaction().apply {
                            replace(R.id.flFragment,  listFragment)
                            commit()
                        }

                    }
                    R.id.date_sort ->{
                        filtrage_space_l1.text = "Trier par" ;
                        filtrage_space_l2.text = "Date" ;
                        filtrage_space.visibility = View.VISIBLE ;
                        val new_notes = notes.sortedByDescending { it.date }
                        val listFragment = NotesFragment(new_notes!!)

                        supportFragmentManager.beginTransaction().apply {
                            replace(R.id.flFragment,  listFragment)
                            commit()
                        }

                    }
                }
                true
            })
            popupMenu.show()
        }


        filtrage_space_delete.setOnClickListener {

            val listFragment = NotesFragment(notes!!)

            supportFragmentManager.beginTransaction().apply {
                replace(R.id.flFragment,  listFragment)
                commit()
            }
            filtrage_space.visibility = View.GONE ;
        }


        val notesFragment = NotesFragment(notes!!)
        supportFragmentManager.beginTransaction().apply {
            replace(R.id.flFragment,  notesFragment)
            commit()
        }

    }



    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {

        super.onActivityResult(requestCode, resultCode, data)
        Log.w("requestCode" , requestCode.toString())
        if (requestCode == 1) {
            if (resultCode == Activity.RESULT_OK) {

                var note = data!!.getSerializableExtra("note") as? Note

                if(note != null) {
                    notes += note ;
                    val listFragment = NotesFragment(notes!!)

                    supportFragmentManager.beginTransaction().apply {
                        replace(R.id.flFragment,  listFragment)
                        commit()
                    }
                }

            }
        }

        if (requestCode == 10) {
            if (resultCode == Activity.RESULT_OK) {
                val note = data!!.getSerializableExtra("note") as? Note

                var new_notes = notes.filter { !(it.titre.equals(note!!.titre) && it.description.equals(note!!.description) && it.type == note!!.type && it.image.equals(note!!.image)) }
                notes = new_notes!!


                val notesFragment = NotesFragment(notes!!)
                supportFragmentManager.beginTransaction().apply {
                    replace(R.id.flFragment,  notesFragment)
                    commit()
                }
            }
        }

    }
    override fun passDataCom(element: Note) {
        notes -= element
    }


    override fun startActivituy(element: Note)  {

        val intent : Intent = Intent(
            applicationContext ,
            NotePage::class.java
        ) ;
        intent.putExtra("note" , element ) ;
        startActivityForResult(intent, 10);


    }


    override fun onConfigurationChanged(newConfig: Configuration) {
        Log.w("rotation" , newConfig.orientation.toString() ) ;
        super.onConfigurationChanged(newConfig)

        val listFragment = NotesFragment(notes!!)

        supportFragmentManager.beginTransaction().apply {
            replace(R.id.flFragment,  listFragment)
            commit()
        }
        filtrage_space.visibility = View.GONE ;

    }

}